// Generated by CoffeeScript 1.7.1
(function() {
  var async, config, extractRDFfromAdobeXMP, extractTracklistfromRDF, extractXMPfromAuditionSession, fs, main, parseTrackListFromRDF, parseXML, workflow, xml2js;

  config = {
    inputFile: process.argv[2],
    artist_title_separator: 'รท'
  };

  fs = require('fs');

  async = require('async');

  xml2js = require('xml2js');

  parseXML = function(XMLString, callback) {
    if ((XMLString != null ? XMLString.toString : void 0) == null) {
      callback(new Error('parseXML missing input string!'));
    }
    return xml2js.parseString(XMLString, callback);
  };

  extractXMPfromAuditionSession = function(hash, callback) {
    var _ref, _ref1, _ref2, _ref3;
    return callback(null, hash != null ? (_ref = hash.sesx) != null ? (_ref1 = _ref.session) != null ? (_ref2 = _ref1[0]) != null ? (_ref3 = _ref2.xmpMetadata) != null ? _ref3[0] : void 0 : void 0 : void 0 : void 0 : void 0);
  };

  extractRDFfromAdobeXMP = function(hash, callback) {
    var _ref, _ref1, _ref2, _ref3;
    return callback(null, hash != null ? (_ref = hash['x:xmpmeta']) != null ? (_ref1 = _ref['rdf:RDF']) != null ? (_ref2 = _ref1[0]) != null ? (_ref3 = _ref2['rdf:Description']) != null ? _ref3[0] : void 0 : void 0 : void 0 : void 0 : void 0);
  };

  extractTracklistfromRDF = function(hash, callback) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    return callback(null, hash != null ? (_ref = hash['xmpDM:Tracks']) != null ? (_ref1 = _ref[0]) != null ? (_ref2 = _ref1['rdf:Bag']) != null ? (_ref3 = _ref2[0]) != null ? (_ref4 = _ref3['rdf:li']) != null ? (_ref5 = _ref4[0]) != null ? (_ref6 = _ref5['xmpDM:markers']) != null ? (_ref7 = _ref6[0]) != null ? (_ref8 = _ref7['rdf:Seq']) != null ? (_ref9 = _ref8[0]) != null ? _ref9['rdf:li'] : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0);
  };

  parseTrackListFromRDF = function(list, callback) {
    var artist_title, item, tracklist;
    tracklist = (function() {
      var _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        artist_title = item != null ? (_ref = item['xmpDM:name']) != null ? (_ref1 = _ref[0]) != null ? _ref1.split(config.artist_title_separator) : void 0 : void 0 : void 0;
        _results.push({
          title: (_ref2 = artist_title[1]) != null ? _ref2.trim() : void 0,
          artist: (_ref3 = artist_title[0]) != null ? _ref3.trim() : void 0,
          time: item != null ? (_ref4 = item['xmpDM:startTime']) != null ? (_ref5 = _ref4[0]) != null ? _ref5.trim() : void 0 : void 0 : void 0,
          url: item != null ? (_ref6 = item['xmpDM:comment']) != null ? (_ref7 = _ref6[0]) != null ? _ref7.trim() : void 0 : void 0 : void 0
        });
      }
      return _results;
    })();
    return callback(null, tracklist);
  };

  workflow = async.seq(fs.readFile, parseXML, extractXMPfromAuditionSession, parseXML, extractRDFfromAdobeXMP, extractTracklistfromRDF, parseTrackListFromRDF);

  (main = function() {
    return workflow(config.inputFile, function(err, res) {
      if (err) {
        throw err;
      }
      return console.log(JSON.stringify({
        tracks: res
      }, 0, 2));
    });
  })();

}).call(this);
